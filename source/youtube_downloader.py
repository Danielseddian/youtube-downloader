import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import yt_dlp
import os
import threading
import subprocess
import platform
import hashlib
import time
import shutil
from pathlib import Path

class YouTubeDownloader:
    def __init__(self, root):
        self.root = root
        self.root.title("YouTube Downloader")
        self.root.geometry("600x400")
        self.root.resizable(False, False)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.download_path = tk.StringVar()
        self.url = tk.StringVar()
        self.is_downloading = False
        self.available_formats = []
        self.selected_format = tk.StringVar()
        self.video_info = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.errors_count = 0
        self.temp_file_size = 0
        self.current_temp_file = None
        self.download_cancelled = False
        self.download_thread = None
        self.is_resuming = False

        # –ü—É—Ç–∏ –∫ ffmpeg/ffprobe (–∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç)
        self.ffmpeg_path = None
        self.ffprobe_path = None
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤
        self.current_stage = 0
        self.total_stages = 4
        self.stage_names = [
            "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞",
            "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞", 
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏",
            "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–æ–º"
        ]
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É Downloads –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.set_default_download_path()
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
        self.setup_ui()
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ç–µ–ø–µ—Ä—å log_text —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        self.check_for_temp_files()

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç–∏ –∫ ffmpeg/ffprobe
        self.detect_ffmpeg_paths()
        
    def set_default_download_path(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É Downloads –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        home = Path.home()
        downloads_path = home / "Downloads"
        self.download_path.set(str(downloads_path))
        
    def check_for_temp_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            download_dir = Path(self.download_path.get())
            if not download_dir.exists():
                return
                
            # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            temp_files = list(download_dir.glob("temp_*"))
            if temp_files:
                # –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                latest_temp = max(temp_files, key=os.path.getmtime)
                self.current_temp_file = str(latest_temp)
                self.temp_file_size = os.path.getsize(latest_temp)
                self.log_message(f"üîÑ –ù–∞–π–¥–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {latest_temp.name}")
                self.log_message("–ú–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    def detect_ffmpeg_paths(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç–∏ –∫ ffmpeg/ffprobe –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ self.ffmpeg_path/self.ffprobe_path"""
        try:
            # 1) –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ PATH ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            import shutil as _sh
            ff = _sh.which('ffmpeg')
            fp = _sh.which('ffprobe')
            if ff:
                self.ffmpeg_path = ff
            if fp:
                self.ffprobe_path = fp

            # 2) WinGet –ø—É—Ç—å Gyan.FFmpeg (—á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π)
            if platform.system() == 'Windows' and (not self.ffmpeg_path or not self.ffprobe_path):
                base = os.path.join(os.getenv('LOCALAPPDATA') or '', 'Microsoft', 'WinGet', 'Packages')
                try:
                    # –ò—â–µ–º –∫–∞—Ç–∞–ª–æ–≥ Gyan.FFmpeg*
                    for name in os.listdir(base):
                        if name.lower().startswith('gyan.ffmpeg'):
                            bin_dir = os.path.join(base, name, 'ffmpeg-8.0-full_build', 'bin')
                            ff_cand = os.path.join(bin_dir, 'ffmpeg.exe')
                            fp_cand = os.path.join(bin_dir, 'ffprobe.exe')
                            if os.path.exists(ff_cand):
                                self.ffmpeg_path = self.ffmpeg_path or ff_cand
                            if os.path.exists(fp_cand):
                                self.ffprobe_path = self.ffprobe_path or fp_cand
                except Exception:
                    pass

            # –õ–æ–≥
            if self.ffmpeg_path:
                self.log_message(f"FFmpeg: {self.ffmpeg_path}")
            else:
                self.log_message("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é.")
            if self.ffprobe_path:
                self.log_message(f"FFprobe: {self.ffprobe_path}")
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FFmpeg –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        
    def open_download_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        folder_path = self.download_path.get()
        if os.path.exists(folder_path):
            if platform.system() == "Windows":
                os.startfile(folder_path)
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", folder_path])
            else:  # Linux
                subprocess.run(["xdg-open", folder_path])
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    def show_success_dialog(self, title, file_path):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        dialog.geometry("400x200")
        dialog.resizable(False, False)
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (400 // 2)
        y = (dialog.winfo_screenheight() // 2) - (200 // 2)
        dialog.geometry(f"400x200+{x}+{y}")
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞
        frame = ttk.Frame(dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        # –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞
        success_label = ttk.Label(frame, text="‚úÖ", font=("Arial", 24))
        success_label.pack(pady=(0, 10))
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_label = ttk.Label(frame, text=f"–í–∏–¥–µ–æ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!", 
                                font=("Arial", 12, "bold"))
        message_label.pack(pady=(0, 10))
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        path_label = ttk.Label(frame, text=f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤:\n{file_path}", 
                             font=("Arial", 9), foreground="gray")
        path_label.pack(pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(frame)
        button_frame.pack()
        
        open_button = ttk.Button(button_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", 
                               command=lambda: [self.open_download_folder(), dialog.destroy()])
        open_button.pack(side=tk.LEFT, padx=(0, 10))
        
        close_button = ttk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                                command=dialog.destroy)
        close_button.pack(side=tk.LEFT)
        
    def show_error_dialog(self, error_msg, temp_file_path=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        dialog.geometry("500x400")
        dialog.resizable(False, False)
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialog.winfo_screenheight() // 2) - (400 // 2)
        dialog.geometry(f"500x400+{x}+{y}")
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞
        frame = ttk.Frame(dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        # –ò–∫–æ–Ω–∫–∞ –æ—à–∏–±–∫–∏
        error_label = ttk.Label(frame, text="‚ùå", font=("Arial", 24))
        error_label.pack(pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(frame, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", 
                              font=("Arial", 14, "bold"))
        title_label.pack(pady=(0, 10))
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.analyze_error(error_msg)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        text_frame = ttk.Frame(frame)
        text_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        text_widget = tk.Text(text_frame, height=12, width=60, wrap=tk.WORD)
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_widget.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        text_widget.configure(yscrollcommand=scrollbar.set)
        
        # –í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
        text_content = f"–û–®–ò–ë–ö–ê:\n{error_msg}\n\n"
        text_content += f"–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n{recommendations}\n\n"
        if temp_file_path and os.path.exists(temp_file_path):
            file_size = os.path.getsize(temp_file_path) / (1024 * 1024)
            text_content += f"–í–†–ï–ú–ï–ù–ù–´–ô –§–ê–ô–õ:\n{temp_file_path}\n–†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë"
        
        text_widget.insert(tk.END, text_content)
        text_widget.config(state="disabled")
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(frame)
        button_frame.pack()
        
        if temp_file_path and os.path.exists(temp_file_path):
            resume_button = ttk.Button(button_frame, text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", 
                                     command=lambda: [self.resume_download(), dialog.destroy()])
            resume_button.pack(side=tk.LEFT, padx=(0, 10))
            
            delete_button = ttk.Button(button_frame, text="–ü—Ä–µ—Ä–≤–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å", 
                                     command=lambda: [self.delete_temp_file(temp_file_path), dialog.destroy()])
            delete_button.pack(side=tk.LEFT, padx=(0, 10))
        
        cancel_button = ttk.Button(button_frame, text="–ü—Ä–µ—Ä–≤–∞—Ç—å", 
                                 command=lambda: [self.cancel_download(), dialog.destroy()])
        cancel_button.pack(side=tk.LEFT, padx=(0, 10))
        
        close_button = ttk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                                command=dialog.destroy)
        close_button.pack(side=tk.LEFT)
        
    def analyze_error(self, error_msg):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        error_lower = error_msg.lower()
        
        if any(keyword in error_lower for keyword in ['connection', 'network', 'timeout', 'unreachable']):
            return """‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ—É—Ç–µ—Ä
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN"""
        
        elif any(keyword in error_lower for keyword in ['disk', 'space', 'no space', 'full']):
            return """‚Ä¢ –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
‚Ä¢ –û—á–∏—Å—Ç–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É"""
        
        elif any(keyword in error_lower for keyword in ['permission', 'access denied', 'denied']):
            return """‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —Ñ–∞–π–ª"""
        
        elif any(keyword in error_lower for keyword in ['format', 'codec', 'unsupported']):
            return """‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ yt-dlp: pip install --upgrade yt-dlp
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        
        elif any(keyword in error_lower for keyword in ['url', 'video', 'not found', 'private']):
            return """‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –≤–∏–¥–µ–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ"""
        
        else:
            return f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ yt-dlp: pip install --upgrade yt-dlp\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏"
            
    def delete_temp_file(self, temp_file_path):
        """–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)
                self.log_message("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            self.current_temp_file = None
            self.update_button_states("idle")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            
    def download_audio_separately(self, url, output_path):
        """–°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ"""
        try:
            base_no_ext = os.path.splitext(output_path)[0]
            ydl_outtmpl = base_no_ext + ".%(ext)s"

            if self.has_ffmpeg():
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'outtmpl': ydl_outtmpl,
                    'quiet': True,
                    'no_warnings': True,
                    'postprocessors': [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'aac',
                        'preferredquality': '192',
                    }],
                    **({'ffmpeg_location': os.path.dirname(self.ffmpeg_path)} if self.ffmpeg_path else {}),
                }
            else:
                # –ë–µ–∑ ffmpeg –Ω–µ–ª—å–∑—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å m4a; –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å m4a, –∏–Ω–∞—á–µ –ª—é–±–æ–π bestaudio
                ydl_opts = {
                    'format': 'bestaudio[ext=m4a]/bestaudio',
                    'outtmpl': ydl_outtmpl,
                    'quiet': True,
                    'no_warnings': True,
                }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])

            # –ù–∞–π—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ –æ–∂–∏–¥–∞–µ–º—ã–π output_path
            expected_m4a = base_no_ext + '.m4a'
            if os.path.exists(expected_m4a):
                if output_path != expected_m4a:
                    try:
                        if os.path.exists(output_path):
                            os.remove(output_path)
                    except Exception:
                        pass
                    os.replace(expected_m4a, output_path)
                return True

            # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ m4a, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            for ext in ('.mp3', '.opus', '.webm', '.aac'):
                candidate = base_no_ext + ext
                if os.path.exists(candidate):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å ffmpeg ‚Äî –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ m4a/aac –∫–∞–∫ output_path
                    if self.has_ffmpeg():
                        try:
                            import subprocess
                            cmd = [(self.ffmpeg_path or 'ffmpeg'), '-y', '-i', candidate, '-c:a', 'aac', '-b:a', '192k', output_path]
                            subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                            try:
                                os.remove(candidate)
                            except Exception:
                                pass
                            return True
                        except Exception as e:
                            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                            return False
                    else:
                        # –ë–µ–∑ ffmpeg –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å (—Ö–æ—Ç—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–∑–∂–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç ffmpeg)
                        if output_path != candidate:
                            os.replace(candidate, output_path)
                        return True

            return False
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return False

    def extract_audio_from_video(self, video_path, audio_path):
        """–ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –≤ AAC (m4a)"""
        try:
            import subprocess
            
            cmd = [
                (self.ffmpeg_path or 'ffmpeg'), '-y', '-i', video_path,
                '-vn', '-c:a', 'aac', '-b:a', '192k',
                audio_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8', errors='ignore')
            if result.returncode == 0:
                return True
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
                return False
                
        except FileNotFoundError:
            self.log_message("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
            return False
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return False
            
    def merge_video_audio(self, video_path, audio_path, output_path):
        """–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ"""
        try:
            import subprocess
            
            cmd = [
                (self.ffmpeg_path or 'ffmpeg'), '-y', '-i', video_path, '-i', audio_path,
                '-c:v', 'copy', '-c:a', 'aac', '-b:a', '192k', '-shortest',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8', errors='ignore')
            if result.returncode == 0:
                return True
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {result.stderr}")
                return False
                
        except FileNotFoundError:
            self.log_message("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            return False
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="YouTube Video Downloader", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ü–æ–ª–µ –¥–ª—è URL
        url_label = ttk.Label(main_frame, text="URL –≤–∏–¥–µ–æ:")
        url_label.grid(row=1, column=0, sticky=tk.W, pady=5)
        
        self.url_entry = ttk.Entry(main_frame, textvariable=self.url, width=50)
        self.url_entry.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5, padx=(10, 0))
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
        self.url_entry.bind('<Control-v>', self.paste_url)
        self.url_entry.bind('<Control-V>', self.paste_url)
        self.url_entry.bind('<Control-c>', self.copy_text)
        self.url_entry.bind('<Control-C>', self.copy_text)
        self.url_entry.bind('<Control-x>', self.cut_text)
        self.url_entry.bind('<Control-X>', self.cut_text)
        self.url_entry.bind('<Control-a>', self.select_all)
        self.url_entry.bind('<Control-A>', self.select_all)
        self.url_entry.bind('<Button-3>', self.show_context_menu)  # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_label = ttk.Label(main_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        folder_label.grid(row=2, column=0, sticky=tk.W, pady=5)
        
        self.folder_entry = ttk.Entry(main_frame, textvariable=self.download_path, width=40, state="readonly")
        self.folder_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=5, padx=(10, 0))
        
        browse_button = ttk.Button(main_frame, text="–û–±–∑–æ—Ä", command=self.browse_folder)
        browse_button.grid(row=2, column=2, pady=5, padx=(10, 0))
        
        # –í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        format_label = ttk.Label(main_frame, text="–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:")
        format_label.grid(row=3, column=0, sticky=tk.W, pady=5)
        
        self.format_combo = ttk.Combobox(main_frame, textvariable=self.selected_format, 
                                       state="readonly", width=20)
        self.format_combo.grid(row=3, column=1, sticky=tk.W, pady=5, padx=(10, 0))
        
        get_info_button = ttk.Button(main_frame, text="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", 
                                   command=self.get_video_info)
        get_info_button.grid(row=3, column=2, pady=5, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=3, pady=20)
        
        self.download_button = ttk.Button(button_frame, text="–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", 
                                        command=self.start_download, style="Accent.TButton")
        self.download_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.cancel_button = ttk.Button(button_frame, text="–ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", 
                                      command=self.cancel_download, state="disabled")
        self.cancel_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.resume_button = ttk.Button(button_frame, text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", 
                                      command=self.resume_download, state="disabled")
        self.resume_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.open_folder_button = ttk.Button(button_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", 
                                           command=self.open_download_folder)
        self.open_folder_button.pack(side=tk.LEFT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        log_label = ttk.Label(main_frame, text="–õ–æ–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
        log_label.grid(row=6, column=0, sticky=tk.W, pady=(10, 5))
        
        self.log_text = tk.Text(main_frame, height=10, width=70, wrap=tk.WORD)
        self.log_text.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –ª–æ–≥–æ–≤
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=self.log_text.yview)
        scrollbar.grid(row=7, column=3, sticky=(tk.N, tk.S), pady=5)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(7, weight=1)
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.update_button_states("idle")
        
    def browse_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ")
        if folder:
            self.download_path.set(folder)
            
    def log_message(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            if hasattr(self, 'log_text') and self.log_text:
                self.log_text.insert(tk.END, f"{message}\n")
                self.log_text.see(tk.END)
                self.root.update_idletasks()
        except Exception:
            # fail-safe: –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ UI –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
            pass
        
    def get_video_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        if not self.url.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ")
            return
            
        try:
            self.log_message("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
            
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(self.url.get(), download=False)
                self.video_info = info
                
                title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
                duration = info.get('duration', 0)
                self.log_message(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                self.log_message(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60}:{duration % 60:02d}")
                
                # –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                formats = info.get('formats', [])
                video_formats = []
                
                for f in formats:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ-—Ñ–æ—Ä–º–∞—Ç—ã (—Å –∞—É–¥–∏–æ –∏–ª–∏ –±–µ–∑), —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                    if (f.get('vcodec') != 'none' and f.get('height')):
                        height = f.get('height', 0)
                        ext = f.get('ext', 'unknown')
                        format_id = f.get('format_id', 'unknown')
                        filesize = f.get('filesize', 0)
                        
                        if filesize:
                            size_mb = filesize / (1024 * 1024)
                            format_desc = f"{height}p ({ext}) - {size_mb:.1f}MB"
                        else:
                            format_desc = f"{height}p ({ext})"
                            
                        video_formats.append((format_desc, format_id))
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                video_formats.sort(key=lambda x: int(x[0].split('p')[0]), reverse=True)
                
                if video_formats:
                    self.available_formats = video_formats
                    format_names = [f[0] for f in video_formats]
                    self.format_combo['values'] = format_names
                    self.format_combo.set(format_names[0])  # –í—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    self.log_message(f"–ù–∞–π–¥–µ–Ω–æ {len(format_names)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤")
                else:
                    self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
                    
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
            self.log_message(f"‚ùå {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            
    def generate_file_hash(self, url, format_id, title):
        """–°–æ–∑–¥–∞—Ç—å —Ö–µ—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        content = f"{url}_{format_id}_{title}_{int(time.time())}"
        return hashlib.md5(content.encode()).hexdigest()[:12]
        
    def get_unique_filename(self, title, extension, is_redownload=False):
        """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        download_dir = Path(self.download_path.get())
        if not download_dir.exists():
            download_dir.mkdir(parents=True, exist_ok=True)
            
        base_name = title
        counter = 1
        
        if is_redownload:
            # –ü—Ä–∏ –ø–µ—Ä–µ—Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º _copy_
            while True:
                if counter == 1:
                    filename = f"{base_name}_copy.{extension}"
                else:
                    filename = f"{base_name}_copy_{counter}.{extension}"
                    
                file_path = download_dir / filename
                if not file_path.exists():
                    return str(file_path)
                counter += 1
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            while True:
                if counter == 1:
                    filename = f"{base_name}.{extension}"
                else:
                    filename = f"{base_name}_{counter}.{extension}"
                    
                file_path = download_dir / filename
                if not file_path.exists():
                    return str(file_path)
                counter += 1
                
    def check_existing_file(self, title):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        download_dir = Path(self.download_path.get())
        if not download_dir.exists():
            return None
            
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        for ext in ['mp4', 'webm', 'mkv', 'avi']:
            pattern = f"*{title}*.{ext}"
            existing_files = list(download_dir.glob(pattern))
            if existing_files:
                return existing_files[0]
        return None
        
    def reset_download_state(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.errors_count = 0
        self.temp_file_size = 0
        self.current_temp_file = None
        self.download_cancelled = False
        
    def check_temp_file_progress(self, temp_path):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(temp_path):
            return False
            
        current_size = os.path.getsize(temp_path)
        if current_size > self.temp_file_size:
            self.temp_file_size = current_size
            self.errors_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            return True
        return False
        
    def cancel_download(self):
        """–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"""
        self.download_cancelled = True
        self.is_downloading = False
        self.log_message("‚èπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        self.update_button_states("cancelled")
        
    def resume_download(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"""
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å .part
        real_temp = self.resolve_existing_temp_variant(self.current_temp_file) if self.current_temp_file else None
        if real_temp and os.path.exists(real_temp):
            self.log_message("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...")
            self.is_resuming = True
            self.start_download()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
    def update_button_states(self, state):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        if state == "downloading":
            self.download_button.config(state="disabled")
            self.cancel_button.config(state="normal")
            self.resume_button.config(state="disabled")
        elif state == "cancelled":
            self.download_button.config(state="normal")
            self.cancel_button.config(state="disabled")
            self.resume_button.config(state="normal" if self.current_temp_file else "disabled")
        elif state == "idle":
            self.download_button.config(state="normal")
            self.cancel_button.config(state="disabled")
            self.resume_button.config(state="disabled")
        elif state == "error":
            self.download_button.config(state="normal")
            self.cancel_button.config(state="disabled")
            self.resume_button.config(state="normal" if self.current_temp_file else "disabled")
        
    def progress_hook(self, d):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if getattr(self, 'download_cancelled', False):
            raise yt_dlp.utils.DownloadError('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
        if d['status'] == 'downloading':
            if 'total_bytes' in d and d['total_bytes']:
                percent = (d['downloaded_bytes'] / d['total_bytes']) * 100
                self.log_message(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {percent:.1f}%")
            elif 'total_bytes_estimate' in d and d['total_bytes_estimate']:
                percent = (d['downloaded_bytes'] / d['total_bytes_estimate']) * 100
                self.log_message(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {percent:.1f}%")
        elif d['status'] == 'finished':
            self.log_message("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
    def start_stage(self, stage_num, stage_name):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —ç—Ç–∞–ø"""
        self.current_stage = stage_num
        self.log_message(f"–≠—Ç–∞–ø {stage_num}/{self.total_stages}:")
        self.log_message(f"{stage_name}.")
        
    def log_stage_progress(self, progress_text):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        self.log_message(progress_text)
        
    def finish_stage(self, stage_num, completion_text):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø"""
        self.log_message(completion_text)
        
    def paste_url(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏ URL –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            clipboard_content = self.root.clipboard_get()
            if clipboard_content:
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                self.url_entry.delete(0, tk.END)
                self.url_entry.insert(0, clipboard_content)
                return "break"  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        except tk.TclError:
            # –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            pass
        return None
        
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ –≤—Å—Ç–∞–≤–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            context_menu = tk.Menu(self.root, tearoff=0)
            context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å (Ctrl+V)", command=self.paste_from_menu)
            context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å (Ctrl+X)", command=self.cut_text)
            context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å (Ctrl+C)", command=self.copy_text)
            context_menu.add_separator()
            context_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë (Ctrl+A)", command=self.select_all)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
            context_menu.tk_popup(event.x_root, event.y_root)
        except Exception:
            pass
            
    def paste_from_menu(self):
        """–í—Å—Ç–∞–≤–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.paste_url(None)
        
    def cut_text(self):
        """–í—ã—Ä–µ–∑–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            if self.url_entry.selection_present():
                self.url_entry.event_generate("<<Cut>>")
        except Exception:
            pass
            
    def copy_text(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            if self.url_entry.selection_present():
                self.url_entry.event_generate("<<Copy>>")
        except Exception:
            pass
            
    def select_all(self):
        """–í—ã–¥–µ–ª–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç"""
        self.url_entry.select_range(0, tk.END)
        self.url_entry.icursor(tk.END)
            
    def download_video(self):
        """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∞—É–¥–∏–æ"""
        try:
            if not self.url.get().strip():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ")
                return
                
            if not self.download_path.get():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
                
            # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if not self.is_downloading:
                self.reset_download_state()
                
            # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
            if not self.video_info:
                self.log_message("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
                ydl_opts = {'quiet': True, 'no_warnings': True}
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    self.video_info = ydl.extract_info(self.url.get(), download=False)
            
            title = self.video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
            existing_file = self.check_existing_file(title)
            is_redownload = False
            if existing_file and not self.is_downloading:
                result = messagebox.askyesno(
                    "–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 
                    f"–§–∞–π–ª —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n{existing_file.name}\n\n–°–∫–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
                    icon='question'
                )
                if not result:
                    self.log_message("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return
                else:
                    self.log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–∫–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
                    is_redownload = True
            
            # –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç
            selected_format_desc = self.selected_format.get()
            if not selected_format_desc or not self.available_formats:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                return
                
            # –ù–∞–π—Ç–∏ format_id –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            format_id = None
            for desc, fid in self.available_formats:
                if desc == selected_format_desc:
                    format_id = fid
                    break
                    
            if not format_id:
                format_id = 'best'  # Fallback
                
            # –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞
            file_extension = 'mp4'  # –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            for desc, fid in self.available_formats:
                if desc == selected_format_desc:
                    if '(' in desc and ')' in desc:
                        ext_part = desc.split('(')[1].split(')')[0]
                        if ext_part in ['mp4', 'webm', 'mkv', 'avi']:
                            file_extension = ext_part
                    break
            # –í—Å–µ–≥–¥–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ MP4 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            container_ext = 'mp4'
                
            # –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            final_filename = self.get_unique_filename(title, container_ext, is_redownload)
            
            # –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            temp_hash = self.generate_file_hash(self.url.get(), format_id, title)
            temp_filename = f"temp_{temp_hash}.{container_ext}"
            temp_path = os.path.join(self.download_path.get(), temp_filename)
            self.current_temp_file = temp_path
            
            self.is_downloading = True
            self.update_button_states("downloading")
            self.progress.start()
            
            # –≠—Ç–∞–ø 1: –°–∫–∞—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–∫–∞–∫ –µ—Å—Ç—å)
            self.start_stage(1, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞")
            success = self.download_with_retry(temp_path, format_id, file_extension)

            if success and not self.download_cancelled:
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                if self.has_audio_track(temp_path) or not self.has_ffmpeg():
                    part_path = temp_path + '.part'
                    if os.path.exists(part_path):
                        self.update_button_states("error")
                        self.show_error_dialog("–§–∞–π–ª –µ—â—ë –Ω–µ –¥–æ–∫–∞—á–∞–Ω (–æ–±–Ω–∞—Ä—É–∂–µ–Ω .part). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.", part_path)
                        return
                    if os.path.exists(temp_path):
                        os.rename(temp_path, final_filename)
                    self.finish_stage(1, "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!")
                    self.show_success_dialog(title, final_filename)
                    self.update_button_states("idle")
                else:
                    # –≠—Ç–∞–ø 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–∞—É–¥–∏–æ)
                    self.start_stage(2, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
                    video_only_path = temp_path  # —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    audio_path = os.path.splitext(temp_path)[0] + '.m4a'
                    audio_ok = self.download_audio_separately(self.url.get(), audio_path)
                    if not audio_ok:
                        # —Å–∫–∞—á–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–æ–µ –≤–∏–¥–µ–æ —Å–æ –∑–≤—É–∫–æ–º –∏ –∏–∑–≤–ª–µ—á—å
                        small_with_audio = os.path.splitext(temp_path)[0] + '_small.mp4'
                        try:
                            with yt_dlp.YoutubeDL({'outtmpl': small_with_audio, 'format': 'worst[acodec!=none]', **({'ffmpeg_location': os.path.dirname(self.ffmpeg_path)} if self.ffmpeg_path else {})}) as ydl:
                                ydl.download([self.url.get()])
                            audio_ok = self.extract_audio_from_video(small_with_audio, audio_path)
                        finally:
                            if os.path.exists(small_with_audio):
                                try:
                                    os.remove(small_with_audio)
                                except Exception:
                                    pass
                    if not audio_ok:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É")
                    self.finish_stage(2, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    
                    # –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏
                    self.start_stage(3, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏")
                    self.log_stage_progress("–ü–æ–ª—É—á–µ–Ω–æ: 100%")
                    self.finish_stage(3, "–ó–≤—É–∫–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
                    
                    # –≠—Ç–∞–ø 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–æ–º
                    self.start_stage(4, "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–æ–º")
                    merged_ok = self.merge_video_audio(video_only_path, audio_path, final_filename)
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                    for f in [video_only_path, audio_path]:
                        if os.path.exists(f):
                            try:
                                os.remove(f)
                            except Exception:
                                pass
                    if not merged_ok:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤–∏–¥–µ–æ –∏ –∑–≤—É–∫")
                    # –î–æ–ø. —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ffmpeg –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ h264/aac
                    try:
                        if self.has_ffmpeg():
                            import subprocess as _sp
                            tmp_compat = final_filename + '.tmp.mp4'
                            cmd = [(self.ffmpeg_path or 'ffmpeg'), '-y', '-i', final_filename, '-c:v', 'libx264', '-pix_fmt', 'yuv420p', '-profile:v', 'high', '-preset', 'veryfast', '-crf', '20', '-c:a', 'aac', '-b:a', '192k', tmp_compat]
                            _sp.run(cmd, check=True, stdout=_sp.DEVNULL, stderr=_sp.DEVNULL)
                            os.replace(tmp_compat, final_filename)
                    except Exception:
                        pass
                    self.finish_stage(4, "‚úÖ –í–∏–¥–µ–æ —Å–æ –∑–≤—É–∫–æ–º –≥–æ—Ç–æ–≤–æ!")
                    self.show_success_dialog(title, final_filename)
                    self.update_button_states("idle")
            elif self.download_cancelled:
                self.log_message("‚èπÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.update_button_states("cancelled")
            else:
                # –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                self.update_button_states("error")
                self.show_error_dialog("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫", self.current_temp_file)
                return
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}"
            self.log_message(f"‚ùå {error_msg}")
            self.update_button_states("error")
            self.show_error_dialog(error_msg, self.current_temp_file)
            
        finally:
            if not self.download_cancelled:
                self.is_downloading = False
                self.progress.stop()
                
    def download_with_retry(self, temp_path, format_id, file_extension):
        """–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ-—Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ –∞—É–¥–∏–æ) —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        max_retries = 3
        attempts = 0
        
        while attempts < max_retries and not self.download_cancelled:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if os.path.exists(temp_path):
                    if not self.check_temp_file_progress(temp_path):
                        # –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
                        attempts += 1
                        self.log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {attempts}/{max_retries}")
                        if attempts >= max_retries:
                            break
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ-—Ñ–æ—Ä–º–∞—Ç (–≤–æ–∑–º–æ–∂–µ–Ω –∏ —Å–æ –∑–≤—É–∫–æ–º, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
                if self.download_selected_video(temp_path, format_id):
                    return True
                    
            except Exception as e:
                attempts += 1
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempts}/{max_retries}): {e}")
                if attempts >= max_retries:
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª–µ
                if os.path.exists(temp_path):
                    if not self.check_temp_file_progress(temp_path):
                        self.log_message("üîÑ –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    else:
                        self.log_message("üìà –ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                        
        return False

    def download_selected_video(self, temp_video_path, format_id):
        """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ format_id –∫–∞–∫ –µ—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ –∑–≤—É–∫–æ–º, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)"""
        ydl_opts = {
            'outtmpl': temp_video_path,
            'progress_hooks': [self.progress_hook],
            'format': format_id,
            'continuedl': True,
            'nopart': False,
            'concurrent_fragment_downloads': 1,
            'quiet': False,
            **({'ffmpeg_location': os.path.dirname(self.ffmpeg_path)} if self.ffmpeg_path else {}),
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([self.url.get()])
        return True
        
    def download_with_audio_separation(self, temp_path, format_id, file_extension):
        """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º –∞—É–¥–∏–æ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ+–∞—É–¥–∏–æ –≤–º–µ—Å—Ç–µ
            ydl_opts = {
                'outtmpl': temp_path,
                'progress_hooks': [self.progress_hook],
                # –§–æ—Ä–º–∞—Ç: –µ—Å–ª–∏ –µ—Å—Ç—å ffmpeg ‚Äî –≤–∏–¥–µ–æ+–ª—É—á—à–µ–µ –∞—É–¥–∏–æ; –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
                'format': (f'{format_id}+bestaudio/best' if self.has_ffmpeg() else (self.find_progressive_format_by_height(None) or 'best[acodec!=none]')),
                'merge_output_format': ('mkv' if self.has_ffmpeg() else None),
                # –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                'continuedl': True,
                'nopart': False,
                'concurrent_fragment_downloads': 1,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([self.url.get()])
                
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª–µ
            if self.has_audio_track(temp_path):
                self.log_message("‚úÖ –í–∏–¥–µ–æ —Å –∞—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.log_message("‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
                return self.download_separate_audio_video(temp_path, format_id, file_extension)
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return self.download_separate_audio_video(temp_path, format_id, file_extension)
            
    def download_separate_audio_video(self, temp_path, format_id, file_extension):
        """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ä–∞–∑–¥–µ–ª—å–Ω–æ"""
        try:
            # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            video_temp = temp_path.replace(f'.{file_extension}', f'_video.{file_extension}')
            audio_temp = temp_path.replace(f'.{file_extension}', '_audio.m4a')
            
            # –°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
            self.log_message("üìπ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
            ydl_opts = {
                'outtmpl': video_temp,
                'progress_hooks': [self.progress_hook],
                'format': format_id,
                'continuedl': True,
                'nopart': False,
                'concurrent_fragment_downloads': 1,
                **({'ffmpeg_location': os.path.dirname(self.ffmpeg_path)} if self.ffmpeg_path else {}),
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([self.url.get()])
                
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –æ—Ç–¥–µ–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å ffmpeg –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)
            self.log_message("üéµ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
            if self.has_ffmpeg() and self.download_audio_separately(self.url.get(), audio_temp):
                # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
                self.log_message("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ...")
                if self.merge_video_audio(video_temp, audio_temp, temp_path):
                    # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    for temp_file in [video_temp, audio_temp]:
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                    return True
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –æ—Ç–¥–µ–ª—å–Ω–æ, –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –≤–∏–¥–µ–æ
                if self.has_ffmpeg():
                    self.log_message("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...")
                    return self.extract_and_merge_audio(video_temp, temp_path, file_extension)
                else:
                    # –ë–µ–∑ ffmpeg –Ω–µ —Å–º–æ–∂–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π video_temp –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    try:
                        import shutil as _sh
                        _sh.copyfile(video_temp, temp_path)
                        return True
                    except Exception:
                        return False
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
            
    def extract_and_merge_audio(self, video_path, output_path, file_extension):
        """–ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
        try:
            # –°–∫–∞—á–∞—Ç—å —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –≤–∏–¥–µ–æ —Å –∞—É–¥–∏–æ
            small_video = video_path.replace(f'_video.{file_extension}', '_small.mp4')
            
            ydl_opts = {
                'outtmpl': small_video,
                'format': 'worst[height<=480]',  # –°–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                **({'ffmpeg_location': os.path.dirname(self.ffmpeg_path)} if self.ffmpeg_path else {}),
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([self.url.get()])
                
            # –ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ
            audio_temp = video_path.replace(f'_video.{file_extension}', '_audio.m4a')
            if self.extract_audio_from_video(small_video, audio_temp):
                # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
                if self.merge_video_audio(video_path, audio_temp, output_path):
                    # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    for temp_file in [small_video, audio_temp]:
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                    return True
                    
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            
        return False
        
    def has_audio_track(self, video_path):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ –≤ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ"""
        try:
            import subprocess as _sp
            if shutil.which('ffprobe') is not None or (self.ffprobe_path and os.path.exists(self.ffprobe_path)):
                cmd = [(self.ffprobe_path or 'ffprobe'), '-v', 'quiet', '-select_streams', 'a', '-show_entries', 'stream=codec_type', '-of', 'csv=p=0', video_path]
                result = _sp.run(cmd, capture_output=True, text=True, encoding='utf-8', errors='ignore')
                return 'audio' in (result.stdout or '')
            if shutil.which('ffmpeg') is not None or (self.ffmpeg_path and os.path.exists(self.ffmpeg_path)):
                result = _sp.run([(self.ffmpeg_path or 'ffmpeg'), '-i', video_path], capture_output=True, text=True, encoding='utf-8', errors='ignore')
                probe = (result.stderr or '') + (result.stdout or '')
                return ('Audio:' in probe) or (' Stream #' in probe and 'Audio' in probe)
        except Exception:
            pass
        return False
            
    def start_download(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_downloading:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —á–∏—Å—Ç–∏–º –ª–æ–≥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if not getattr(self, 'is_resuming', False):
                self.log_text.delete(1.0, tk.END)
                self.reset_download_state()
            else:
                # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∑—é–º–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
                self.is_resuming = False
            # –≤—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
            self.download_cancelled = False
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.download_thread = threading.Thread(target=self.download_video)
            self.download_thread.daemon = True
            self.download_thread.start()

    def has_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            if self.ffmpeg_path and os.path.exists(self.ffmpeg_path):
                return True
            if shutil.which('ffmpeg') is not None:
                return True
            subprocess.run([(self.ffmpeg_path or 'ffmpeg'), '-version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return True
        except Exception:
            return False

    def is_progressive_format(self, format_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–æ—Ä–º–∞—Ç –∏ –≤–∏–¥–µ–æ, –∏ –∞—É–¥–∏–æ"""
        if not self.video_info:
            return False
        for f in self.video_info.get('formats', []):
            if f.get('format_id') == format_id:
                return f.get('vcodec') != 'none' and f.get('acodec') != 'none'
        return False

    def find_progressive_format_by_height(self, height):
        """–ù–∞–π—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º"""
        candidates = []
        for f in self.video_info.get('formats', []):
            if f.get('vcodec') != 'none' and f.get('acodec') != 'none' and f.get('height'):
                candidates.append(f)
        if not candidates:
            return None
        # –≤—ã–±—Ä–∞—Ç—å –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ –≤—ã—Å–æ—Ç—ã, –∑–∞—Ç–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –±–∏—Ç—Ä–µ–π—Ç—É
        candidates.sort(key=lambda x: (abs((x.get('height') or 0) - (height or 0)), -(x.get('tbr') or 0)))
        chosen = candidates[0]
        return chosen.get('format_id')

    def resolve_existing_temp_variant(self, base_temp_path):
        """–í–µ—Ä–Ω—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º .part"""
        variants = [
            base_temp_path,
            base_temp_path + '.part',
        ]
        for v in variants:
            if os.path.exists(v):
                return v
        return base_temp_path

def main():
    root = tk.Tk()
    app = YouTubeDownloader(root)
    root.mainloop()

if __name__ == "__main__":
    main()
